"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateLang = validateLang;
exports.validateLocaleCode = validateLocaleCode;
exports.validateLocaleData = validateLocaleData;
exports.validateLocales = validateLocales;
exports.validateNgettextMsgid = validateNgettextMsgid;
exports.validateNgettextNumber = validateNgettextNumber;
exports.validateNgettextPluralForms = validateNgettextPluralForms;
var _minimalSafe = require("plural-forms/minimal-safe");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function validateLocale(locale, availLocales) {
  if (process.env.NODE_ENV !== 'production') {
    if (!availLocales[locale]) {
      throw new Error("\n                    Locale '".concat(locale, "' is not found in config.\n                    useLocales accepts only existing locales. Use addLocale function before.\n                    Available locales: ").concat(JSON.stringify(availLocales)));
    }
  }
}
function validateLocaleCode(locale) {
  if (process.env.NODE_ENV !== 'production') {
    if (typeof locale !== 'string') {
      throw new Error("Expected locale code to be a string but recieved ".concat(_typeof(locale), " insttead"));
    }
  }
}
function validateLocaleData(data) {
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line
    var addLocaleDoc = 'https://ttag.js.org/docs/library-api.html#addlocale';
    if (!data) {
      throw new Error("\n            Locale data should not be empty.\n            see - ".concat(addLocaleDoc, "\n            "));
    }
    if (!data.headers) {
      throw new Error("\n            Locale data should contain headers \"".concat(JSON.stringify(data), "\".\n            see - ").concat(addLocaleDoc, "\n            "));
    }
    if (!data.headers['plural-forms'] && !data.headers['Plural-Forms']) {
      throw new Error("\n            Locale data.headers should contain 'Plural-Forms' attribute \"".concat(JSON.stringify(data), "\".\n            see - ").concat(addLocaleDoc, "\n            "));
    }
    if (!data.translations && !data.contexts) {
      throw new Error("\n            Locale data should contain translations or contexts property \"".concat(JSON.stringify(data), "\".\n            see - ").concat(addLocaleDoc, "\n            "));
    }
    if (data.translations && !Object.keys(data.translations).length) {
      throw new Error("\n            Locale data.translations should have at least 1 key\"".concat(JSON.stringify(data), "\".\n            see - ").concat(addLocaleDoc, "\n            "));
    }
    if (data.contexts && !Object.keys(data.contexts).length) {
      throw new Error("\n            Locale data.contexts should have at least 1 key\"".concat(JSON.stringify(data), "\".\n            see - ").concat(addLocaleDoc, "\n            "));
    }
  }
}
function validateLocales(locales, availLocales) {
  if (process.env.NODE_ENV !== 'production') {
    if (!Array.isArray(locales)) {
      throw new Error('useLocales accepts only array as the first argument');
    }
    locales.forEach(function (locale) {
      return validateLocale(locale, availLocales);
    });
  }
}
function validateNgettextMsgid(str) {
  if (process.env.NODE_ENV !== 'production') {
    var ngettextDoc = 'https://ttag.js.org/docs/ngettext.html';
    if (!(str.hasOwnProperty('_strs') && str.hasOwnProperty('_exprs'))) {
      throw new Error("The first argument for ngettext must be tagged with 'msgid' tag.\n                see - ".concat(ngettextDoc, ";\n                "));
    }
  }
}
function validateNgettextNumber(n) {
  if (process.env.NODE_ENV !== 'production') {
    var ngettextDoc = 'https://ttag.js.org/docs/ngettext.html';
    if (!(typeof n === 'number')) {
      throw new Error("The last argument to ngettext - '".concat(n, "' expected to be a number. Got '").concat(_typeof(n), "' instead.\n                see - ").concat(ngettextDoc));
    }
  }
}
function validateNgettextPluralForms(expectedFormsCount, actualFormsCount) {
  if (process.env.NODE_ENV !== 'production') {
    if (actualFormsCount !== expectedFormsCount) {
      throw new Error( // eslint-disable-next-line max-len
      "ngettext expects ".concat(expectedFormsCount, " for the current default locale, but received - ").concat(actualFormsCount, "."));
    }
  }
}
function validateLang(lang) {
  if (process.env.NODE_ENV !== 'production') {
    var langs = (0, _minimalSafe.getAvailLangs)().join(',');
    if (!(0, _minimalSafe.hasLang)(lang)) {
      throw new Error("Unknown lang code - ".concat(lang, ". Lang should be one of: ").concat(langs, "."));
    }
  }
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TTag = TTag;
exports.jt = exports.gettext = exports.c = exports.addLocale = exports._ = void 0;
exports.msgid = msgid;
exports.useLocales = exports.useLocale = exports.t = exports.setDefaultLang = exports.setDedent = exports.ngettext = void 0;
var _utils = require("./utils");
var _validation = require("./validation");
var _config = _interopRequireDefault(require("./config"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function Context(context) {
  if (process.env.NODE_ENV !== 'production') {
    if (typeof context !== 'string') {
      throw new Error('String type is expected as a first argument to c() function.');
    }
  }
  this.getContext = function () {
    return context;
  };
}
var getTransContext = function getTransContext(obj) {
  if (obj instanceof Context) {
    return obj.getContext();
  }
  return '';
};
function isFuzzy(translationObj) {
  return translationObj && translationObj.comments && translationObj.comments.flag === 'fuzzy';
}
function hasTranslations(msgstr) {
  if (!msgstr) return false;
  for (var i = 0; i < msgstr.length; i++) {
    if (!msgstr[i].length) return false;
  }
  return true;
}
var separator = /(\${\s*\d+\s*})/g;
var slotIdRegexp = /\${\s*(\d+)\s*}/;
function msgid(strings) {
  /* eslint-disable no-new-wrappers */
  if (strings && strings.reduce) {
    for (var _len = arguments.length, exprs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      exprs[_key - 1] = arguments[_key];
    }
    var result = new String((0, _utils.buildStr)(strings, exprs));
    result._strs = strings;
    result._exprs = exprs;
    return result;
  }
  return strings;
}
function TTag() {
  var conf = new _config["default"]();
  var maybeDedent = function maybeDedent(str) {
    return conf.isDedent() ? (0, _utils.dedentStr)(str) : str;
  };
  var findTransObj = function findTransObj(locale, str, ctx) {
    var locales = conf.getAvailLocales();
    var localeData = locales[locale];
    if (!localeData) return null;
    // verbose format
    if (localeData.translations) {
      var translations = localeData.translations[ctx] || localeData.translations[''];
      var translation = translations && translations[str];
      if (translation && !isFuzzy(translation) && hasTranslations(translation.msgstr)) {
        return translation.msgstr;
      }
    }
    // compact format
    if (localeData.contexts) {
      var _translations = localeData.contexts[ctx] || localeData.contexts[''];
      var _translation = _translations && _translations[str];
      if (_translation && hasTranslations(_translation)) {
        return _translation;
      }
    }
    return null;
  };
  var findTranslation = function findTranslation(str, ctx) {
    var locales = conf.getCurrentLocales();
    if (locales.length) {
      for (var i = 0; i < locales.length; i++) {
        var translation = findTransObj(locales[i], str, ctx);
        if (translation) {
          conf.setCurrentLocale(locales[i]);
          return translation;
        }
      }
    }
    return findTransObj(conf.getCurrentLocale(), str, ctx);
  };
  function setDefaultLang(lang) {
    if (process.env.NODE_ENV !== 'production') (0, _validation.validateLang)(lang);
    conf.setDefaultLang(lang);
  }
  function useLocales(locales) {
    conf.setCurrentLocales(locales);
  }
  function setDedent(value) {
    conf.setDedent(Boolean(value));
  }
  function useLocale(locale) {
    conf.setCurrentLocale(locale);
  }
  function addLocale(locale, data) {
    conf.addLocale(locale, data);
  }
  function t(strings) {
    var result = strings;
    if (strings && strings.reduce) {
      for (var _len2 = arguments.length, exprs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        exprs[_key2 - 1] = arguments[_key2];
      }
      var id = maybeDedent((0, _utils.getMsgid)(strings, exprs));
      var context = getTransContext(this);
      var trans = findTranslation(id, context);
      result = trans ? (0, _utils.msgid2Orig)(trans[0], exprs) : (0, _utils.buildStr)(strings, exprs);
    }
    return maybeDedent(result);
  }
  function jt(strings) {
    for (var _len3 = arguments.length, exprs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      exprs[_key3 - 1] = arguments[_key3];
    }
    if (strings && strings.reduce) {
      var id = maybeDedent((0, _utils.getMsgid)(strings, exprs));
      var context = getTransContext(this);
      var trans = findTranslation(id, context);
      if (!trans) return (0, _utils.buildArr)(strings, exprs);

      // splits string & capturing group into tokens
      //
      var translatedTokens = trans[0].split(separator);
      return translatedTokens.map(function (token) {
        var slotIdMatch = token.match(slotIdRegexp);
        // slotIdMatch is not null only when the token is a variable slot (${xx})
        return slotIdMatch ? exprs[+slotIdMatch[1]] : token;
      });
    }
    return strings;
  }
  function ngettext() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    if (process.env.NODE_ENV !== 'production') (0, _validation.validateNgettextMsgid)(args[0]);
    var id = maybeDedent((0, _utils.getMsgid)(args[0]._strs, args[0]._exprs));
    var n = args[args.length - 1];
    if (process.env.NODE_ENV !== 'production') (0, _validation.validateNgettextNumber)(n);
    var forms = args.slice(1, -1);
    forms.unshift(args[0].toString());
    if (process.env.NODE_ENV !== 'production') {
      (0, _validation.validateNgettextPluralForms)(conf.getDefaultPluralFormsCount(), forms.length);
    }
    var trans = findTranslation(id, getTransContext(this));
    if (trans) {
      var _pluralFn = (0, _utils.getPluralFnForTrans)(conf);
      return maybeDedent((0, _utils.msgid2Orig)(_pluralFn(n, trans), args[0]._exprs));
    }
    var pluralFn = conf.getDefaultPluralFn();
    return maybeDedent(pluralFn(n, forms));
  }
  function gettext(id) {
    var context = getTransContext(this);
    var trans = findTranslation(id, context);
    return trans ? trans[0] : id;
  }
  var _ = gettext;
  function c(context) {
    var ctx = new Context(context);
    return {
      t: t.bind(ctx),
      jt: jt.bind(ctx),
      gettext: gettext.bind(ctx),
      ngettext: ngettext.bind(ctx)
    };
  }
  return {
    _: _,
    addLocale: addLocale,
    c: c,
    gettext: gettext,
    jt: jt,
    ngettext: ngettext,
    setDedent: setDedent,
    setDefaultLang: setDefaultLang,
    t: t,
    useLocale: useLocale,
    useLocales: useLocales
  };
}
var globalTTag = new TTag();
var _ = exports._ = globalTTag._;
var addLocale = exports.addLocale = globalTTag.addLocale;
var c = exports.c = globalTTag.c;
var gettext = exports.gettext = globalTTag.gettext;
var jt = exports.jt = globalTTag.jt;
var ngettext = exports.ngettext = globalTTag.ngettext;
var setDedent = exports.setDedent = globalTTag.setDedent;
var setDefaultLang = exports.setDefaultLang = globalTTag.setDefaultLang;
var t = exports.t = globalTTag.t;
var useLocale = exports.useLocale = globalTTag.useLocale;
var useLocales = exports.useLocales = globalTTag.useLocales;